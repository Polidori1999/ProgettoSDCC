docker compose down
docker compose up --build
docker compose logs -f node1
docker kill --signal SIGKILL node2



# 1) in una shell
docker compose up -d
while true; do docker compose logs -f --since=1s; done

# 2) in un’altra shell: killa e fai rientrare un nodo
docker kill node2
# (o il tuo script di crash/rientro)


per rimuovere processi in uso:
docker ps -a --filter network=progettosdcc_default
docker rm $(docker ps -a --filter network=progettosdcc_default -q)
docker network rm progettosdcc_default

docker compose build
docker compose up -d registry node1 node2 node3 node4 node5







per toglierlo
docker rm -f node6




 docker run --rm   --network progettosdcc_default   --name client --hostname client   --entrypoint "" progettosdcc-node1   /usr/local/bin/gossip-node     --id=client:9004     --port=9004     --peers=node1:9001,node2:9002,node3:9003     --lookup=payments




 peers.go: gestione thread-safe dei peer

 registry.go: tabella servizi + lookup

 digest.go: calcolo e confronto digest

 msgfactory.go: costruzione heartbeat con digest

 gossip.go: invio selettivo di heartbeat solo se il digest è cambiato

 failure.go: rimozione peer morti

 node.go: orchestri tutto e fornisci l’entrypoint



 killare in maniera forzata
 # prendi TUTTI gli id dei container incriminati (nome che inizia per node o registry)
  # per ciascun id estrai il PID host
 IDS=$(docker ps -a --filter "name=node" --filter "name=registry" -q)


 for id in $IDS; do
   echo "Container $id:"
   docker inspect -f ' PID = {{.State.Pid}}' "$id"
 done

for id in $IDS; do
  PID=$(docker inspect -f '{{.State.Pid}}' "$id")
  if [ -n "$PID" ] && [ "$PID" != "0" ]; then
    echo "→ kill -9 $PID"
    sudo kill -9 "$PID"
  fi
done




sudo aa-remove-unknown        # pulisce i profili zombie
sudo systemctl restart docker



aggiungere o rimuovere servizi

docker exec node2 sh -c 'echo "ADD sum" >> /tmp/services.ctrl'
docker exec node2 sh -c 'echo "DEL sub" >> /tmp/services.ctrl'


docker compose run --rm --no-deps --name client2 \
  client \
  --id=client2:9010 \
  --port=9010 \
  --registry=registry:9000 \
  --lookup=sub



docker compose up -d --build


stop=false; trap 'stop=true' INT TERM
while :; do
  docker compose logs -f --since=1s --tail=0 || true
  $stop && break
  sleep 0.5
done



# crash
docker compose kill node2            # (o docker kill node2)

# stop & start
docker compose stop node1
docker compose start node1



#ricerca con learn from lookup disattivato
 docker compose run --rm --no-deps --name client2 \
  -e SDCC_LOOKUP_TTL=3 \
  -e SDCC_LEARN_FROM_HB=false \
  -e SDCC_LEARN_FROM_LOOKUP=true \
  client --id=client2:9010 --port=9010 --registry=registry:9000 --lookup=sum


  #
  ./deploy_sdcc_ec2.sh ec2-user ec2-50-19-201-206.compute-1.amazonaws.com https://github.com/Polidori1999/ProgettoSDCC.git main
