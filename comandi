docker compose down
docker compose up --build
docker compose logs -f node1
docker kill --signal SIGKILL node2


per rimuovere processi in uso:
docker ps -a --filter network=progettosdcc_default
docker rm $(docker ps -a --filter network=progettosdcc_default -q)
docker network rm progettosdcc_default

docker compose build
 docker compose up -d registry node1 node2 node3 node4 node5

per aggiungere nuovo nodo


docker run --rm --name lookup-node --stop-signal=SIGTERM \
  --network progettosdcc_default -p 9006:9006/udp \
  progettosdcc-node:latest \
  --id=node6:9006 --port=9006 --peers=node1:9001 --lookup=payments


per toglierlo
docker rm -f node6

docker run --rm \                          # lo elimini quando esce
  --name lookup-node \                     # nome del container
  --stop-signal=SIGTERM \                  # chiude in modo “graceful”
  --network progettosdcc_default \         # stessa network degli altri
  -p 9006:9006/udp \                       # apre la porta UDP (facoltativo se è solo client)
  progettosdcc-node:latest \               # immagine buildata da compose
  --id=node6:9006 \                        # host:porta che userà nel cluster
  --port=9006 \                            # la porta su cui ascolta
  --peers=node1:9001 \                     # almeno un seed già up (puoi metterne più di uno, virgole)
  --lookup=payments                        # ***il servizio da cercare***




 docker run --rm   --network progettosdcc_default   --name client --hostname client   --entrypoint "" progettosdcc-node1   /usr/local/bin/gossip-node     --id=client:9004     --port=9004     --peers=node1:9001,node2:9002,node3:9003     --lookup=payments




 peers.go: gestione thread-safe dei peer

 registry.go: tabella servizi + lookup

 digest.go: calcolo e confronto digest

 msgfactory.go: costruzione heartbeat con digest

 gossip.go: invio selettivo di heartbeat solo se il digest è cambiato

 failure.go: rimozione peer morti

 node.go: orchestri tutto e fornisci l’entrypoint



 killare in maniera forzata
 # prendi TUTTI gli id dei container incriminati (nome che inizia per node o registry)
  # per ciascun id estrai il PID host
 IDS=$(docker ps -a --filter "name=node" --filter "name=registry" -q)


 for id in $IDS; do
   echo "Container $id:"
   docker inspect -f ' PID = {{.State.Pid}}' "$id"
 done

for id in $IDS; do
  PID=$(docker inspect -f '{{.State.Pid}}' "$id")
  if [ -n "$PID" ] && [ "$PID" != "0" ]; then
    echo "→ kill -9 $PID"
    sudo kill -9 "$PID"
  fi
done




sudo aa-remove-unknown        # pulisce i profili zombie
sudo systemctl restart docker
