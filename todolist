| #     | Task                                                                                                                                                                                                                                                                                                                                                                                         | Output atteso / test                                                                                                 |
| ----- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| **1** | **Portare il gossip da “a tutti” a “k = ⌈log₂ N⌉ + 1 peer random ad ogni round”**<br>• Aggiungi `rand.Seed(time.Now().UnixNano())` nel `main`.<br>• Nel `GossipManager.Start()`<br>  – riduci il ticker a 1 s;<br>  – calcola `k` sul len(peers);<br>  – `rand.Shuffle` e invia solo ai primi `k`;<br>  – dopo `SendUDP` fai `gm.peers.Seen(peer)` per non far scattare il FD lato mittente. | • In un cluster di 8 nodi, ogni nodo continua a ricevere almeno un pacchetto < 15 s.<br>• Nessun falso “SUSPICIOUS”. |
| **2** | **Mandare heartbeat anche se il digest non cambia** (almeno la versione “digest-only”).                                                                                                                                                                                                                                                                                                      | Il campo `LastSeen` di ogni peer si aggiorna comunque → nessun falso suspect quando il cluster è stabile.            |
| **3** | **Regolare i timeout del FailureDetector** (facoltativo): con ticker a 1 s puoi ridurre `suspectTimeout` a 6-8 s per test più rapidi.                                                                                                                                                                                                                                                        | Crash simulato con `docker kill -9 nodeX` → SUSPICIOUS dopo \~timeout, DEAD dopo quorum.                             |
| **4** | **Pulizia GossipManager**<br>• separa `sendFullHeartbeat()` e `sendDigest()`;<br>• usa due ticker (veloce + lento) se vuoi ottimizzare la banda.                                                                                                                                                                                                                                             | Banda ridotta, ma il detector rimane affidabile.                                                                     |
| **5** | **Service Discovery**<br>Implementa definitivamente `MsgLookup`, `MsgLookupResponse` (molto è già presente):<br>• TTL decrementa a ogni hop;<br>• risposta diretta UDP al client.                                                                                                                                                                                                            | Esegui il container `lookup` → deve stampare l’indirizzo del provider corretto.                                      |
| **6** | **Gestione dinamica dei servizi**<br>• comandi CLI o API per aggiungere/rimuovere un servizio a runtime;<br>• verifica che il digest cambi e il nuovo stato si propaghi.                                                                                                                                                                                                                     | Aggiungi “analytics” a node3 → in pochi secondi un lookup trova node3.                                               |
| **7** | **Handling dei Leave volontari** (già a buon punto, ma testa)<br>• `docker stop nodeX` → gli altri loggano `LEFT voluntarily`, quorum si aggiorna senza falsi dead.                                                                                                                                                                                                                          | –                                                                                                                    |
| **8** | **Pulizia e metriche**<br>• metrica Prometheus o semplice `/metrics` HTTP con: nodi alive, rumor spediti, heartbeat inviati.<br>• utile per demo finale su EC2.                                                                                                                                                                                                                              | `curl node1:9100/metrics` restituisce i contatori.                                                                   |
